
Project_STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002758  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002888  08002888  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002888  08002888  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200000a4  08002934  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002934  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d5  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adb  00000000  00000000  000297a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b86  00000000  00000000  0002c680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b43f  00000000  00000000  00043206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824e8  00000000  00000000  0004e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0b2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000296c  00000000  00000000  000d0b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800284c 	.word	0x0800284c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	0800284c 	.word	0x0800284c

0800014c <initButton>:

uint16_t Button_Pins[3] = {
	Button0_Pin, Button1_Pin, Button2_Pin
};

void initButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e01b      	b.n	8000190 <initButton+0x44>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <initButton+0x74>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a18      	ldr	r2, [pc, #96]	; (80001c4 <initButton+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <initButton+0x7c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		KeyReg3[i] = NORMAL_STATE;
 8000176:	4a15      	ldr	r2, [pc, #84]	; (80001cc <initButton+0x80>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPress[i] = 200;
 8000180:	4a13      	ldr	r2, [pc, #76]	; (80001d0 <initButton+0x84>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3301      	adds	r3, #1
 800018e:	607b      	str	r3, [r7, #4]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b02      	cmp	r3, #2
 8000194:	dde0      	ble.n	8000158 <initButton+0xc>
	}
	for(int i = 0; i < 3; i++){
 8000196:	2300      	movs	r3, #0
 8000198:	603b      	str	r3, [r7, #0]
 800019a:	e007      	b.n	80001ac <initButton+0x60>
		button_flag[i] = 0;
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <initButton+0x88>)
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2100      	movs	r1, #0
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	603b      	str	r3, [r7, #0]
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	ddf4      	ble.n	800019c <initButton+0x50>
	}
}
 80001b2:	bf00      	nop
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	20000128 	.word	0x20000128
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	20000110 	.word	0x20000110
 80001d0:	20000134 	.word	0x20000134
 80001d4:	20000140 	.word	0x20000140

080001d8 <isButtonPressed>:

int isButtonPressed(int index){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <isButtonPressed+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d106      	bne.n	80001fa <isButtonPressed+0x22>
		button_flag[index] = 0;
 80001ec:	4a06      	ldr	r2, [pc, #24]	; (8000208 <isButtonPressed+0x30>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2100      	movs	r1, #0
 80001f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001f6:	2301      	movs	r3, #1
 80001f8:	e000      	b.n	80001fc <isButtonPressed+0x24>
	}
	return 0;
 80001fa:	2300      	movs	r3, #0
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000140 	.word	0x20000140

0800020c <getKeyInput>:

void getKeyInput(){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e078      	b.n	800030a <getKeyInput+0xfe>
		KeyReg0[i] = KeyReg1[i];
 8000218:	4a40      	ldr	r2, [pc, #256]	; (800031c <getKeyInput+0x110>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	493f      	ldr	r1, [pc, #252]	; (8000320 <getKeyInput+0x114>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000228:	4a3e      	ldr	r2, [pc, #248]	; (8000324 <getKeyInput+0x118>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	493a      	ldr	r1, [pc, #232]	; (800031c <getKeyInput+0x110>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(Button_Ports[i], Button_Pins[i]);
 8000238:	4a3b      	ldr	r2, [pc, #236]	; (8000328 <getKeyInput+0x11c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	493a      	ldr	r1, [pc, #232]	; (800032c <getKeyInput+0x120>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000248:	4619      	mov	r1, r3
 800024a:	4610      	mov	r0, r2
 800024c:	f001 faea 	bl	8001824 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	4619      	mov	r1, r3
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <getKeyInput+0x118>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 800025c:	4a30      	ldr	r2, [pc, #192]	; (8000320 <getKeyInput+0x114>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	492d      	ldr	r1, [pc, #180]	; (800031c <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d149      	bne.n	8000304 <getKeyInput+0xf8>
 8000270:	4a2a      	ldr	r2, [pc, #168]	; (800031c <getKeyInput+0x110>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	492a      	ldr	r1, [pc, #168]	; (8000324 <getKeyInput+0x118>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d13f      	bne.n	8000304 <getKeyInput+0xf8>
			if(KeyReg3[i] != KeyReg2[i]){
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <getKeyInput+0x124>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4925      	ldr	r1, [pc, #148]	; (8000324 <getKeyInput+0x118>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000294:	429a      	cmp	r2, r3
 8000296:	d018      	beq.n	80002ca <getKeyInput+0xbe>
				KeyReg3[i] = KeyReg2[i];
 8000298:	4a22      	ldr	r2, [pc, #136]	; (8000324 <getKeyInput+0x118>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <getKeyInput+0x124>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 80002a8:	4a1e      	ldr	r2, [pc, #120]	; (8000324 <getKeyInput+0x118>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d127      	bne.n	8000304 <getKeyInput+0xf8>
					// TODO
					button_flag[i] = 1;
 80002b4:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <getKeyInput+0x128>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2101      	movs	r1, #1
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 200;
 80002be:	4a1e      	ldr	r2, [pc, #120]	; (8000338 <getKeyInput+0x12c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	21c8      	movs	r1, #200	; 0xc8
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c8:	e01c      	b.n	8000304 <getKeyInput+0xf8>
				}
			}else{
				TimerForKeyPress[i]--;
 80002ca:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <getKeyInput+0x12c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	1e5a      	subs	r2, r3, #1
 80002d4:	4918      	ldr	r1, [pc, #96]	; (8000338 <getKeyInput+0x12c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] <= 0){
 80002dc:	4a16      	ldr	r2, [pc, #88]	; (8000338 <getKeyInput+0x12c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	dc0d      	bgt.n	8000304 <getKeyInput+0xf8>
					KeyReg3[i] = !KeyReg2[i];
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <getKeyInput+0x118>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	bf0c      	ite	eq
 80002f4:	2301      	moveq	r3, #1
 80002f6:	2300      	movne	r3, #0
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <getKeyInput+0x124>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b02      	cmp	r3, #2
 800030e:	dd83      	ble.n	8000218 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000128 	.word	0x20000128
 8000320:	2000011c 	.word	0x2000011c
 8000324:	2000014c 	.word	0x2000014c
 8000328:	20000000 	.word	0x20000000
 800032c:	2000000c 	.word	0x2000000c
 8000330:	20000110 	.word	0x20000110
 8000334:	20000140 	.word	0x20000140
 8000338:	20000134 	.word	0x20000134

0800033c <run_handleMode>:

void run_handleMode(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch (status){
 8000340:	4bab      	ldr	r3, [pc, #684]	; (80005f0 <run_handleMode+0x2b4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b0b      	cmp	r3, #11
 8000348:	f200 8147 	bhi.w	80005da <run_handleMode+0x29e>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <run_handleMode+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000385 	.word	0x08000385
 8000358:	08000385 	.word	0x08000385
 800035c:	08000385 	.word	0x08000385
 8000360:	080005db 	.word	0x080005db
 8000364:	080005db 	.word	0x080005db
 8000368:	080005db 	.word	0x080005db
 800036c:	080005db 	.word	0x080005db
 8000370:	080005db 	.word	0x080005db
 8000374:	080005db 	.word	0x080005db
 8000378:	080003f5 	.word	0x080003f5
 800037c:	0800049f 	.word	0x0800049f
 8000380:	08000541 	.word	0x08000541
		case AUTO_LED_RED:
		case AUTO_LED_AMBER:
		case AUTO_LED_GREEN:
			if(timer_flag[4] == 1){
 8000384:	4b9b      	ldr	r3, [pc, #620]	; (80005f4 <run_handleMode+0x2b8>)
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d006      	beq.n	800039a <run_handleMode+0x5e>
				setTimer(4, 1000);
 800038c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000390:	2004      	movs	r0, #4
 8000392:	f000 fbed 	bl	8000b70 <setTimer>
				handleTime1();
 8000396:	f000 faef 	bl	8000978 <handleTime1>
			}
			if(timer_flag[6] == 1){
 800039a:	4b96      	ldr	r3, [pc, #600]	; (80005f4 <run_handleMode+0x2b8>)
 800039c:	799b      	ldrb	r3, [r3, #6]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <run_handleMode+0x74>
				setTimer(6, 1000);
 80003a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003a6:	2006      	movs	r0, #6
 80003a8:	f000 fbe2 	bl	8000b70 <setTimer>
				handleTime2();
 80003ac:	f000 fb42 	bl	8000a34 <handleTime2>
			}
			if(isButtonPressed(0) == 1){
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ff11 	bl	80001d8 <isButtonPressed>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	f040 8110 	bne.w	80005de <run_handleMode+0x2a2>
				status = MODE_1;
 80003be:	4b8c      	ldr	r3, [pc, #560]	; (80005f0 <run_handleMode+0x2b4>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	601a      	str	r2, [r3, #0]
				status2 = MODE_1;
 80003c4:	4b8c      	ldr	r3, [pc, #560]	; (80005f8 <run_handleMode+0x2bc>)
 80003c6:	220a      	movs	r2, #10
 80003c8:	601a      	str	r2, [r3, #0]
				setTimer(0, 0);
 80003ca:	2100      	movs	r1, #0
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 fbcf 	bl	8000b70 <setTimer>
				setTimer(1, 10000);		// Timer MODE
 80003d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 fbca 	bl	8000b70 <setTimer>
				setTimer(2, 200); 		// Timer toggle
 80003dc:	21c8      	movs	r1, #200	; 0xc8
 80003de:	2002      	movs	r0, #2
 80003e0:	f000 fbc6 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedRed);
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <run_handleMode+0x2c0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fa8b 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 80003ee:	f000 faaf 	bl	8000950 <update7SEGBuffer1>
			}
			break;
 80003f2:	e0f4      	b.n	80005de <run_handleMode+0x2a2>
		case MODE_1:
			togglelLed(200);
 80003f4:	20c8      	movs	r0, #200	; 0xc8
 80003f6:	f000 fd4f 	bl	8000e98 <togglelLed>
			led_buffer[2] = 0;
 80003fa:	4b81      	ldr	r3, [pc, #516]	; (8000600 <run_handleMode+0x2c4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 1;
 8000400:	4b7f      	ldr	r3, [pc, #508]	; (8000600 <run_handleMode+0x2c4>)
 8000402:	2201      	movs	r2, #1
 8000404:	60da      	str	r2, [r3, #12]
			if(timer_flag[1] == 1 || isButtonPressed(2)){
 8000406:	4b7b      	ldr	r3, [pc, #492]	; (80005f4 <run_handleMode+0x2b8>)
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d105      	bne.n	800041a <run_handleMode+0xde>
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff fee2 	bl	80001d8 <isButtonPressed>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d009      	beq.n	800042e <run_handleMode+0xf2>
				status = INIT;
 800041a:	4b75      	ldr	r3, [pc, #468]	; (80005f0 <run_handleMode+0x2b4>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000420:	4b75      	ldr	r3, [pc, #468]	; (80005f8 <run_handleMode+0x2bc>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
				setTimer(2, 0);
 8000426:	2100      	movs	r1, #0
 8000428:	2002      	movs	r0, #2
 800042a:	f000 fba1 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff fed2 	bl	80001d8 <isButtonPressed>
 8000434:	4603      	mov	r3, r0
 8000436:	2b01      	cmp	r3, #1
 8000438:	d117      	bne.n	800046a <run_handleMode+0x12e>
				durationLedRed++;
 800043a:	4b70      	ldr	r3, [pc, #448]	; (80005fc <run_handleMode+0x2c0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	4a6e      	ldr	r2, [pc, #440]	; (80005fc <run_handleMode+0x2c0>)
 8000442:	6013      	str	r3, [r2, #0]
				if(durationLedRed > 99){
 8000444:	4b6d      	ldr	r3, [pc, #436]	; (80005fc <run_handleMode+0x2c0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b63      	cmp	r3, #99	; 0x63
 800044a:	dd02      	ble.n	8000452 <run_handleMode+0x116>
					durationLedRed = 1;
 800044c:	4b6b      	ldr	r3, [pc, #428]	; (80005fc <run_handleMode+0x2c0>)
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
				}
				setTime7SEG1(durationLedRed);
 8000452:	4b6a      	ldr	r3, [pc, #424]	; (80005fc <run_handleMode+0x2c0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fa54 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 800045c:	f000 fa78 	bl	8000950 <update7SEGBuffer1>
				setTimer(1, 10000);
 8000460:	f242 7110 	movw	r1, #10000	; 0x2710
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fb83 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff feb4 	bl	80001d8 <isButtonPressed>
 8000470:	4603      	mov	r3, r0
 8000472:	2b01      	cmp	r3, #1
 8000474:	f040 80b5 	bne.w	80005e2 <run_handleMode+0x2a6>
				status = MODE_2;
 8000478:	4b5d      	ldr	r3, [pc, #372]	; (80005f0 <run_handleMode+0x2b4>)
 800047a:	220b      	movs	r2, #11
 800047c:	601a      	str	r2, [r3, #0]
				status2 = MODE_2;
 800047e:	4b5e      	ldr	r3, [pc, #376]	; (80005f8 <run_handleMode+0x2bc>)
 8000480:	220b      	movs	r2, #11
 8000482:	601a      	str	r2, [r3, #0]
				setTimer(1, 10000);
 8000484:	f242 7110 	movw	r1, #10000	; 0x2710
 8000488:	2001      	movs	r0, #1
 800048a:	f000 fb71 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedGreen);
 800048e:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <run_handleMode+0x2c8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fa36 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 8000498:	f000 fa5a 	bl	8000950 <update7SEGBuffer1>
			}
			break;
 800049c:	e0a1      	b.n	80005e2 <run_handleMode+0x2a6>
		case MODE_2:
			togglelLed(200);
 800049e:	20c8      	movs	r0, #200	; 0xc8
 80004a0:	f000 fcfa 	bl	8000e98 <togglelLed>
			led_buffer[2] = 0;
 80004a4:	4b56      	ldr	r3, [pc, #344]	; (8000600 <run_handleMode+0x2c4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 2;
 80004aa:	4b55      	ldr	r3, [pc, #340]	; (8000600 <run_handleMode+0x2c4>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	60da      	str	r2, [r3, #12]
			if(timer_flag[1] == 1 || isButtonPressed(2)){
 80004b0:	4b50      	ldr	r3, [pc, #320]	; (80005f4 <run_handleMode+0x2b8>)
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d105      	bne.n	80004c4 <run_handleMode+0x188>
 80004b8:	2002      	movs	r0, #2
 80004ba:	f7ff fe8d 	bl	80001d8 <isButtonPressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d006      	beq.n	80004d2 <run_handleMode+0x196>
				status = INIT;
 80004c4:	4b4a      	ldr	r3, [pc, #296]	; (80005f0 <run_handleMode+0x2b4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
				setTimer(2, 0);
 80004ca:	2100      	movs	r1, #0
 80004cc:	2002      	movs	r0, #2
 80004ce:	f000 fb4f 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff fe80 	bl	80001d8 <isButtonPressed>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d117      	bne.n	800050e <run_handleMode+0x1d2>
				durationLedGreen++;
 80004de:	4b49      	ldr	r3, [pc, #292]	; (8000604 <run_handleMode+0x2c8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	4a47      	ldr	r2, [pc, #284]	; (8000604 <run_handleMode+0x2c8>)
 80004e6:	6013      	str	r3, [r2, #0]
				if(durationLedGreen > 99){
 80004e8:	4b46      	ldr	r3, [pc, #280]	; (8000604 <run_handleMode+0x2c8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b63      	cmp	r3, #99	; 0x63
 80004ee:	dd02      	ble.n	80004f6 <run_handleMode+0x1ba>
					durationLedGreen = 1;
 80004f0:	4b44      	ldr	r3, [pc, #272]	; (8000604 <run_handleMode+0x2c8>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
				}
				setTime7SEG1(durationLedGreen);
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <run_handleMode+0x2c8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fa02 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 8000500:	f000 fa26 	bl	8000950 <update7SEGBuffer1>
				setTimer(1, 10000);
 8000504:	f242 7110 	movw	r1, #10000	; 0x2710
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fb31 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fe62 	bl	80001d8 <isButtonPressed>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	d165      	bne.n	80005e6 <run_handleMode+0x2aa>
				status = MODE_3;
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <run_handleMode+0x2b4>)
 800051c:	220c      	movs	r2, #12
 800051e:	601a      	str	r2, [r3, #0]
				status2 = MODE_3;
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <run_handleMode+0x2bc>)
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
				setTimer(1, 10000);
 8000526:	f242 7110 	movw	r1, #10000	; 0x2710
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fb20 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedAmber);
 8000530:	4b35      	ldr	r3, [pc, #212]	; (8000608 <run_handleMode+0x2cc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f9e5 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 800053a:	f000 fa09 	bl	8000950 <update7SEGBuffer1>
			}
			break;
 800053e:	e052      	b.n	80005e6 <run_handleMode+0x2aa>
		case MODE_3:
			togglelLed(200);
 8000540:	20c8      	movs	r0, #200	; 0xc8
 8000542:	f000 fca9 	bl	8000e98 <togglelLed>
			led_buffer[2] = 0;
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <run_handleMode+0x2c4>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 3;
 800054c:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <run_handleMode+0x2c4>)
 800054e:	2203      	movs	r2, #3
 8000550:	60da      	str	r2, [r3, #12]
			if(timer_flag[1] == 1 || isButtonPressed(2)){
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <run_handleMode+0x2b8>)
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <run_handleMode+0x22a>
 800055a:	2002      	movs	r0, #2
 800055c:	f7ff fe3c 	bl	80001d8 <isButtonPressed>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d009      	beq.n	800057a <run_handleMode+0x23e>
				status = INIT;
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <run_handleMode+0x2b4>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <run_handleMode+0x2bc>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				setTimer(2, 0);
 8000572:	2100      	movs	r1, #0
 8000574:	2002      	movs	r0, #2
 8000576:	f000 fafb 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff fe2c 	bl	80001d8 <isButtonPressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b01      	cmp	r3, #1
 8000584:	d117      	bne.n	80005b6 <run_handleMode+0x27a>
				durationLedAmber++;
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <run_handleMode+0x2cc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <run_handleMode+0x2cc>)
 800058e:	6013      	str	r3, [r2, #0]
				if(durationLedAmber > 9){
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <run_handleMode+0x2cc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b09      	cmp	r3, #9
 8000596:	dd02      	ble.n	800059e <run_handleMode+0x262>
					durationLedAmber = 1;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <run_handleMode+0x2cc>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
				}
				setTime7SEG1(durationLedAmber);
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <run_handleMode+0x2cc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f9ae 	bl	8000904 <setTime7SEG1>
				update7SEGBuffer1();
 80005a8:	f000 f9d2 	bl	8000950 <update7SEGBuffer1>
				setTimer(1, 10000);
 80005ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fadd 	bl	8000b70 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fe0e 	bl	80001d8 <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d113      	bne.n	80005ea <run_handleMode+0x2ae>
				status = INIT;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <run_handleMode+0x2b4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <run_handleMode+0x2bc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
				setTimer(1, 10000);
 80005ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 facc 	bl	8000b70 <setTimer>
			}
			break;
 80005d8:	e007      	b.n	80005ea <run_handleMode+0x2ae>
		default:
			break;
 80005da:	bf00      	nop
 80005dc:	e006      	b.n	80005ec <run_handleMode+0x2b0>
			break;
 80005de:	bf00      	nop
 80005e0:	e004      	b.n	80005ec <run_handleMode+0x2b0>
			break;
 80005e2:	bf00      	nop
 80005e4:	e002      	b.n	80005ec <run_handleMode+0x2b0>
			break;
 80005e6:	bf00      	nop
 80005e8:	e000      	b.n	80005ec <run_handleMode+0x2b0>
			break;
 80005ea:	bf00      	nop
	}
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000c0 	.word	0x200000c0
 80005f4:	20000104 	.word	0x20000104
 80005f8:	200000c4 	.word	0x200000c4
 80005fc:	20000090 	.word	0x20000090
 8000600:	200000cc 	.word	0x200000cc
 8000604:	20000098 	.word	0x20000098
 8000608:	20000094 	.word	0x20000094

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fe1e 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f82c 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f8b2 	bl	8000780 <MX_GPIO_Init>
  MX_TIM2_Init();
 800061c:	f000 f864 	bl	80006e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <main+0x58>)
 8000622:	f001 fd5b 	bl	80020dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <main+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
  initButton();
 800062c:	f7ff fd8e 	bl	800014c <initButton>
  init7SEG();
 8000630:	f000 f94a 	bl	80008c8 <init7SEG>
  setTimer(3, 500); 	// Timer display 7SEG
 8000634:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000638:	2003      	movs	r0, #3
 800063a:	f000 fa99 	bl	8000b70 <setTimer>
  while (1)
  {
	  runTraficLight1();
 800063e:	f000 fc9d 	bl	8000f7c <runTraficLight1>
	  runTraficLight2();
 8000642:	f000 fd3d 	bl	80010c0 <runTraficLight2>

	  run_handleMode();
 8000646:	f7ff fe79 	bl	800033c <run_handleMode>
	  if(timer_flag[3] == 1){
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <main+0x60>)
 800064c:	78db      	ldrb	r3, [r3, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f5      	beq.n	800063e <main+0x32>
		  setTimer(3, 500);
 8000652:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000656:	2003      	movs	r0, #3
 8000658:	f000 fa8a 	bl	8000b70 <setTimer>
		  run_seven_segment();
 800065c:	f000 fa72 	bl	8000b44 <run_seven_segment>
	  runTraficLight1();
 8000660:	e7ed      	b.n	800063e <main+0x32>
 8000662:	bf00      	nop
 8000664:	20000158 	.word	0x20000158
 8000668:	200000c0 	.word	0x200000c0
 800066c:	20000104 	.word	0x20000104

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b090      	sub	sp, #64	; 0x40
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2228      	movs	r2, #40	; 0x28
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f8dc 	bl	800283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f8ec 	bl	8001884 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006b2:	f000 f8d1 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fb58 	bl	8001d84 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006da:	f000 f8bd 	bl	8000858 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3740      	adds	r7, #64	; 0x40
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_TIM2_Init+0x94>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM2_Init+0x94>)
 800070e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_TIM2_Init+0x94>)
 800071c:	2209      	movs	r2, #9
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_TIM2_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_TIM2_Init+0x94>)
 800072e:	f001 fc85 	bl	800203c <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000738:	f000 f88e 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_TIM2_Init+0x94>)
 800074a:	f001 fe03 	bl	8002354 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 f880 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM2_Init+0x94>)
 8000766:	f001 ffdb 	bl	8002720 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f872 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000158 	.word	0x20000158

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_GPIO_Init+0xb4>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <MX_GPIO_Init+0xb4>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80007c4:	2200      	movs	r2, #0
 80007c6:	f24f 71e0 	movw	r1, #63456	; 0xf7e0
 80007ca:	481b      	ldr	r0, [pc, #108]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007cc:	f001 f841 	bl	8001852 <HAL_GPIO_WritePin>
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80007d0:	2200      	movs	r2, #0
 80007d2:	217f      	movs	r1, #127	; 0x7f
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <MX_GPIO_Init+0xbc>)
 80007d6:	f001 f83c 	bl	8001852 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80007da:	230e      	movs	r3, #14
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4619      	mov	r1, r3
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007ee:	f000 fe9f 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_AMBER1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_AMBER2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80007f2:	f24f 73e0 	movw	r3, #63456	; 0xf7e0
 80007f6:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0xb8>)
 800080c:	f000 fe90 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000810:	237f      	movs	r3, #127	; 0x7f
 8000812:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0xbc>)
 8000828:	f000 fe82 	bl	8001530 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800
 800083c:	40010c00 	.word	0x40010c00

08000840 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	runTimer();
 8000848:	f000 f9b0 	bl	8000bac <runTimer>
	getKeyInput();
 800084c:	f7ff fcde 	bl	800020c <getKeyInput>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <display7SEG>:
						  {0,0,0,1,1,1,1},
						  {0,0,0,0,0,0,0},
						  {0,0,0,0,1,0,0}
						};

void display7SEG(int num){
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if(num < 0 && num >= 10) return;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da02      	bge.n	8000878 <display7SEG+0x14>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b09      	cmp	r3, #9
 8000876:	dc1d      	bgt.n	80008b4 <display7SEG+0x50>
	for(int i = 0; i < 7; i++){
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e016      	b.n	80008ac <display7SEG+0x48>
		HAL_GPIO_WritePin(led7SEG_GPIO_Ports[i], led7SEG_Pins[i], numLed7SEG[num][i]);
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <display7SEG+0x58>)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <display7SEG+0x5c>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800088e:	4c0d      	ldr	r4, [pc, #52]	; (80008c4 <display7SEG+0x60>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	18e2      	adds	r2, r4, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f000 ffd6 	bl	8001852 <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; i++){
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	dde5      	ble.n	800087e <display7SEG+0x1a>
 80008b2:	e000      	b.n	80008b6 <display7SEG+0x52>
	if(num < 0 && num >= 10) return;
 80008b4:	bf00      	nop
	}
}
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000014 	.word	0x20000014
 80008c0:	20000030 	.word	0x20000030
 80008c4:	20000040 	.word	0x20000040

080008c8 <init7SEG>:

void init7SEG(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <init7SEG+0x38>)
 80008d4:	f000 ffbd 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <init7SEG+0x38>)
 80008e0:	f000 ffb7 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <init7SEG+0x38>)
 80008ec:	f000 ffb1 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <init7SEG+0x38>)
 80008f8:	f000 ffab 	bl	8001852 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40010800 	.word	0x40010800

08000904 <setTime7SEG1>:

// Handle tracfic light 1
int seg1_chuc;
int seg1_donvi;

void setTime7SEG1(int duration){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	seg1_chuc = duration/10;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <setTime7SEG1+0x40>)
 8000910:	fb82 1203 	smull	r1, r2, r2, r3
 8000914:	1092      	asrs	r2, r2, #2
 8000916:	17db      	asrs	r3, r3, #31
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <setTime7SEG1+0x44>)
 800091c:	6013      	str	r3, [r2, #0]
	seg1_donvi = duration%10;
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <setTime7SEG1+0x40>)
 8000922:	fb83 2301 	smull	r2, r3, r3, r1
 8000926:	109a      	asrs	r2, r3, #2
 8000928:	17cb      	asrs	r3, r1, #31
 800092a:	1ad2      	subs	r2, r2, r3
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	1aca      	subs	r2, r1, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <setTime7SEG1+0x48>)
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	66666667 	.word	0x66666667
 8000948:	200001b0 	.word	0x200001b0
 800094c:	200001a8 	.word	0x200001a8

08000950 <update7SEGBuffer1>:

void update7SEGBuffer1(){
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	led_buffer[0] = seg1_chuc;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <update7SEGBuffer1+0x1c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <update7SEGBuffer1+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = seg1_donvi;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <update7SEGBuffer1+0x24>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <update7SEGBuffer1+0x20>)
 8000962:	6053      	str	r3, [r2, #4]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200001b0 	.word	0x200001b0
 8000970:	200000cc 	.word	0x200000cc
 8000974:	200001a8 	.word	0x200001a8

08000978 <handleTime1>:

void handleTime1(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	update7SEGBuffer1();
 800097c:	f7ff ffe8 	bl	8000950 <update7SEGBuffer1>
	if(seg1_donvi > 0){
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <handleTime1+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd04      	ble.n	8000992 <handleTime1+0x1a>
		seg1_donvi--;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <handleTime1+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3b01      	subs	r3, #1
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <handleTime1+0x40>)
 8000990:	6013      	str	r3, [r2, #0]
	}
	if(seg1_donvi <= 0){
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <handleTime1+0x40>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	dc0b      	bgt.n	80009b2 <handleTime1+0x3a>
		if(seg1_chuc > 0){
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <handleTime1+0x44>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd07      	ble.n	80009b2 <handleTime1+0x3a>
			seg1_chuc--;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <handleTime1+0x44>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <handleTime1+0x44>)
 80009aa:	6013      	str	r3, [r2, #0]
			seg1_donvi = 9;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <handleTime1+0x40>)
 80009ae:	2209      	movs	r2, #9
 80009b0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001a8 	.word	0x200001a8
 80009bc:	200001b0 	.word	0x200001b0

080009c0 <setTime7SEG2>:

// Handle tracfic light 2
int seg2_chuc;
int seg2_donvi;

void setTime7SEG2(int duration){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	seg2_chuc = duration/10;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <setTime7SEG2+0x40>)
 80009cc:	fb82 1203 	smull	r1, r2, r2, r3
 80009d0:	1092      	asrs	r2, r2, #2
 80009d2:	17db      	asrs	r3, r3, #31
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <setTime7SEG2+0x44>)
 80009d8:	6013      	str	r3, [r2, #0]
	seg2_donvi = duration%10;
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <setTime7SEG2+0x40>)
 80009de:	fb83 2301 	smull	r2, r3, r3, r1
 80009e2:	109a      	asrs	r2, r3, #2
 80009e4:	17cb      	asrs	r3, r1, #31
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	1aca      	subs	r2, r1, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <setTime7SEG2+0x48>)
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	66666667 	.word	0x66666667
 8000a04:	200001a4 	.word	0x200001a4
 8000a08:	200001ac 	.word	0x200001ac

08000a0c <update7SEGBuffer2>:

void update7SEGBuffer2(){
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	led_buffer[2] = seg2_chuc;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <update7SEGBuffer2+0x1c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <update7SEGBuffer2+0x20>)
 8000a16:	6093      	str	r3, [r2, #8]
	led_buffer[3] = seg2_donvi;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <update7SEGBuffer2+0x24>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <update7SEGBuffer2+0x20>)
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	200001a4 	.word	0x200001a4
 8000a2c:	200000cc 	.word	0x200000cc
 8000a30:	200001ac 	.word	0x200001ac

08000a34 <handleTime2>:

void handleTime2(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	update7SEGBuffer2();
 8000a38:	f7ff ffe8 	bl	8000a0c <update7SEGBuffer2>
	if(seg2_donvi > 0){
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <handleTime2+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dd04      	ble.n	8000a4e <handleTime2+0x1a>
		seg2_donvi--;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <handleTime2+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <handleTime2+0x40>)
 8000a4c:	6013      	str	r3, [r2, #0]
	}
	if(seg2_donvi <= 0){
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <handleTime2+0x40>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	dc0b      	bgt.n	8000a6e <handleTime2+0x3a>
		if(seg2_chuc > 0){
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <handleTime2+0x44>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dd07      	ble.n	8000a6e <handleTime2+0x3a>
			seg2_chuc--;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <handleTime2+0x44>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <handleTime2+0x44>)
 8000a66:	6013      	str	r3, [r2, #0]
			seg2_donvi = 9;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <handleTime2+0x40>)
 8000a6a:	2209      	movs	r2, #9
 8000a6c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001ac 	.word	0x200001ac
 8000a78:	200001a4 	.word	0x200001a4

08000a7c <update7SEG>:


// Handle common
void update7SEG(int index){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d852      	bhi.n	8000b30 <update7SEG+0xb4>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <update7SEG+0x14>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000aa1 	.word	0x08000aa1
 8000a94:	08000ac5 	.word	0x08000ac5
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000b0d 	.word	0x08000b0d
	switch (index){
		case 0:
			display7SEG(led_buffer[0]);
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <update7SEG+0xc0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fedd 	bl	8000864 <display7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <update7SEG+0xc4>)
 8000ab2:	f000 fece 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000abc:	4820      	ldr	r0, [pc, #128]	; (8000b40 <update7SEG+0xc4>)
 8000abe:	f000 fec8 	bl	8001852 <HAL_GPIO_WritePin>
			break;
 8000ac2:	e036      	b.n	8000b32 <update7SEG+0xb6>
		case 1:
			display7SEG(led_buffer[1]);
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <update7SEG+0xc0>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fecb 	bl	8000864 <display7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	481a      	ldr	r0, [pc, #104]	; (8000b40 <update7SEG+0xc4>)
 8000ad6:	f000 febc 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4817      	ldr	r0, [pc, #92]	; (8000b40 <update7SEG+0xc4>)
 8000ae2:	f000 feb6 	bl	8001852 <HAL_GPIO_WritePin>
			break;
 8000ae6:	e024      	b.n	8000b32 <update7SEG+0xb6>
		case 2:
			display7SEG(led_buffer[2]);
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <update7SEG+0xc0>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff feb9 	bl	8000864 <display7SEG>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <update7SEG+0xc4>)
 8000afa:	f000 feaa 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	480e      	ldr	r0, [pc, #56]	; (8000b40 <update7SEG+0xc4>)
 8000b06:	f000 fea4 	bl	8001852 <HAL_GPIO_WritePin>
			break;
 8000b0a:	e012      	b.n	8000b32 <update7SEG+0xb6>
		case 3:
			display7SEG(led_buffer[3]);
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <update7SEG+0xc0>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fea7 	bl	8000864 <display7SEG>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <update7SEG+0xc4>)
 8000b1e:	f000 fe98 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <update7SEG+0xc4>)
 8000b2a:	f000 fe92 	bl	8001852 <HAL_GPIO_WritePin>
			break;
 8000b2e:	e000      	b.n	8000b32 <update7SEG+0xb6>
		default:
			break;
 8000b30:	bf00      	nop
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000cc 	.word	0x200000cc
 8000b40:	40010800 	.word	0x40010800

08000b44 <run_seven_segment>:


void run_seven_segment(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	if(index_led > 3){
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <run_seven_segment+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	dd02      	ble.n	8000b56 <run_seven_segment+0x12>
		index_led = 0;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <run_seven_segment+0x28>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
	}
	update7SEG(index_led++);
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <run_seven_segment+0x28>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4903      	ldr	r1, [pc, #12]	; (8000b6c <run_seven_segment+0x28>)
 8000b5e:	600a      	str	r2, [r1, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff8b 	bl	8000a7c <update7SEG>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000c8 	.word	0x200000c8

08000b70 <setTimer>:

int timer_counter[10] = {0};
bool timer_flag[10] = {0};
int TIMER_CYCLE = 10;

void setTimer(int index, int duration){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIMER_CYCLE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <setTimer+0x30>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <setTimer+0x34>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <setTimer+0x38>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	200000dc 	.word	0x200000dc
 8000ba8:	20000104 	.word	0x20000104

08000bac <runTimer>:

void runTimer(){
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++){
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	e01c      	b.n	8000bf2 <runTimer+0x46>
		if(timer_counter[i] > 0){
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <runTimer+0x58>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dd13      	ble.n	8000bec <runTimer+0x40>
			timer_counter[i]--;
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <runTimer+0x58>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	1e5a      	subs	r2, r3, #1
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <runTimer+0x58>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <runTimer+0x58>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc04      	bgt.n	8000bec <runTimer+0x40>
				timer_flag[i] = 1;
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <runTimer+0x5c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	dddf      	ble.n	8000bb8 <runTimer+0xc>
			}
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	200000dc 	.word	0x200000dc
 8000c08:	20000104 	.word	0x20000104

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_MspInit+0x60>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_MspInit+0x60>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c80:	d113      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_TIM_Base_MspInit+0x44>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_TIM_Base_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_TIM_Base_MspInit+0x44>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	201c      	movs	r0, #28
 8000ca0:	f000 fc0f 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca4:	201c      	movs	r0, #28
 8000ca6:	f000 fc28 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 faed 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM2_IRQHandler+0x10>)
 8000d0e:	f001 fa31 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000158 	.word	0x20000158

08000d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <onLedRed1>:

int durationLedRed = 5;
int durationLedAmber = 2;
int durationLedGreen = 3;

void onLedRed1(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <onLedRed1+0x28>)
 8000d32:	f000 fd8e 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <onLedRed1+0x28>)
 8000d3c:	f000 fd89 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <onLedRed1+0x28>)
 8000d46:	f000 fd84 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800

08000d54 <onLedAmber1>:

void onLedAmber1(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <onLedAmber1+0x28>)
 8000d5e:	f000 fd78 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <onLedAmber1+0x28>)
 8000d68:	f000 fd73 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <onLedAmber1+0x28>)
 8000d72:	f000 fd6e 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010800 	.word	0x40010800

08000d80 <onLedGreen1>:

void onLedGreen1(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2120      	movs	r1, #32
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <onLedGreen1+0x28>)
 8000d8a:	f000 fd62 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <onLedGreen1+0x28>)
 8000d94:	f000 fd5d 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <onLedGreen1+0x28>)
 8000d9e:	f000 fd58 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010800 	.word	0x40010800

08000dac <onLedRed2>:

void onLedRed2(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <onLedRed2+0x2c>)
 8000db8:	f000 fd4b 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <onLedRed2+0x2c>)
 8000dc4:	f000 fd45 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dce:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <onLedRed2+0x2c>)
 8000dd0:	f000 fd3f 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010800 	.word	0x40010800

08000ddc <onLedAmber2>:

void onLedAmber2(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <onLedAmber2+0x2c>)
 8000de8:	f000 fd33 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <onLedAmber2+0x2c>)
 8000df4:	f000 fd2d 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <onLedAmber2+0x2c>)
 8000e00:	f000 fd27 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40010800 	.word	0x40010800

08000e0c <onLedGreen2>:

void onLedGreen2(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <onLedGreen2+0x2c>)
 8000e18:	f000 fd1b 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <onLedGreen2+0x2c>)
 8000e24:	f000 fd15 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	4802      	ldr	r0, [pc, #8]	; (8000e38 <onLedGreen2+0x2c>)
 8000e30:	f000 fd0f 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010800 	.word	0x40010800

08000e3c <offALL1>:

void offALL1(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2120      	movs	r1, #32
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <offALL1+0x28>)
 8000e46:	f000 fd04 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <offALL1+0x28>)
 8000e50:	f000 fcff 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <offALL1+0x28>)
 8000e5a:	f000 fcfa 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010800 	.word	0x40010800

08000e68 <offALL2>:

void offALL2(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <offALL2+0x2c>)
 8000e74:	f000 fced 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <offALL2+0x2c>)
 8000e80:	f000 fce7 	bl	8001852 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	4802      	ldr	r0, [pc, #8]	; (8000e94 <offALL2+0x2c>)
 8000e8c:	f000 fce1 	bl	8001852 <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010800 	.word	0x40010800

08000e98 <togglelLed>:

LedStateToggle currentLed = LED_ON;
void togglelLed(int duration){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	switch (currentLed) {
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <togglelLed+0xd8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <togglelLed+0x16>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d02d      	beq.n	8000f08 <togglelLed+0x70>
				currentLed = LED_ON;
				setTimer(2, duration);
			}
			break;
		default:
			break;
 8000eac:	e05c      	b.n	8000f68 <togglelLed+0xd0>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	4830      	ldr	r0, [pc, #192]	; (8000f74 <togglelLed+0xdc>)
 8000eb4:	f000 fccd 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2140      	movs	r1, #64	; 0x40
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <togglelLed+0xdc>)
 8000ebe:	f000 fcc8 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	482b      	ldr	r0, [pc, #172]	; (8000f74 <togglelLed+0xdc>)
 8000ec8:	f000 fcc3 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	4828      	ldr	r0, [pc, #160]	; (8000f74 <togglelLed+0xdc>)
 8000ed4:	f000 fcbd 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ede:	4825      	ldr	r0, [pc, #148]	; (8000f74 <togglelLed+0xdc>)
 8000ee0:	f000 fcb7 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <togglelLed+0xdc>)
 8000eec:	f000 fcb1 	bl	8001852 <HAL_GPIO_WritePin>
			if(timer_flag[2] == 1){
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <togglelLed+0xe0>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d034      	beq.n	8000f62 <togglelLed+0xca>
				currentLed = LED_OFF;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <togglelLed+0xd8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
				setTimer(2, duration);
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f7ff fe35 	bl	8000b70 <setTimer>
			break;
 8000f06:	e02c      	b.n	8000f62 <togglelLed+0xca>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <togglelLed+0xdc>)
 8000f0e:	f000 fca0 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, 1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <togglelLed+0xdc>)
 8000f18:	f000 fc9b 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <togglelLed+0xdc>)
 8000f22:	f000 fc96 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <togglelLed+0xdc>)
 8000f2e:	f000 fc90 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <togglelLed+0xdc>)
 8000f3a:	f000 fc8a 	bl	8001852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <togglelLed+0xdc>)
 8000f46:	f000 fc84 	bl	8001852 <HAL_GPIO_WritePin>
			if(timer_flag[2] == 1){
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <togglelLed+0xe0>)
 8000f4c:	789b      	ldrb	r3, [r3, #2]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d009      	beq.n	8000f66 <togglelLed+0xce>
				currentLed = LED_ON;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <togglelLed+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
				setTimer(2, duration);
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fe08 	bl	8000b70 <setTimer>
			break;
 8000f60:	e001      	b.n	8000f66 <togglelLed+0xce>
			break;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <togglelLed+0xd0>
			break;
 8000f66:	bf00      	nop
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000010e 	.word	0x2000010e
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000104 	.word	0x20000104

08000f7c <runTraficLight1>:


void runTraficLight1(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	switch (status){
 8000f80:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <runTraficLight1+0x130>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	f200 8087 	bhi.w	8001098 <runTraficLight1+0x11c>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <runTraficLight1+0x14>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fa1 	.word	0x08000fa1
 8000f94:	08000fd9 	.word	0x08000fd9
 8000f98:	08001059 	.word	0x08001059
 8000f9c:	08001019 	.word	0x08001019
		case INIT:
			offALL1();
 8000fa0:	f7ff ff4c 	bl	8000e3c <offALL1>
			setTimer(0, durationLedRed*1000);
 8000fa4:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <runTraficLight1+0x134>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fddc 	bl	8000b70 <setTimer>
			setTime7SEG1(durationLedRed);
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <runTraficLight1+0x134>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fca1 	bl	8000904 <setTime7SEG1>
			handleTime1();
 8000fc2:	f7ff fcd9 	bl	8000978 <handleTime1>
			setTimer(4, 1000);
 8000fc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f7ff fdd0 	bl	8000b70 <setTimer>

			status = AUTO_LED_RED;
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <runTraficLight1+0x130>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
			break;
 8000fd6:	e066      	b.n	80010a6 <runTraficLight1+0x12a>
		case AUTO_LED_RED:
			onLedRed1();
 8000fd8:	f7ff fea6 	bl	8000d28 <onLedRed1>
			if(timer_flag[0] == 1){
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <runTraficLight1+0x138>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <runTraficLight1+0x120>
				status = AUTO_LED_GREEN;
 8000fe4:	4b31      	ldr	r3, [pc, #196]	; (80010ac <runTraficLight1+0x130>)
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	601a      	str	r2, [r3, #0]
				setTimer(0, durationLedGreen*1000);
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <runTraficLight1+0x13c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fdb9 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedGreen);
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <runTraficLight1+0x13c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fc7e 	bl	8000904 <setTime7SEG1>
				handleTime1();
 8001008:	f7ff fcb6 	bl	8000978 <handleTime1>
				setTimer(4, 1000);
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	2004      	movs	r0, #4
 8001012:	f7ff fdad 	bl	8000b70 <setTimer>
			}
			break;
 8001016:	e041      	b.n	800109c <runTraficLight1+0x120>
		case AUTO_LED_GREEN:
			onLedGreen1();
 8001018:	f7ff feb2 	bl	8000d80 <onLedGreen1>
			if(timer_flag[0] == 1){
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <runTraficLight1+0x138>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d03d      	beq.n	80010a0 <runTraficLight1+0x124>
				status = AUTO_LED_AMBER;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <runTraficLight1+0x130>)
 8001026:	2202      	movs	r2, #2
 8001028:	601a      	str	r2, [r3, #0]
				setTimer(0, durationLedAmber*1000);
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <runTraficLight1+0x140>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4619      	mov	r1, r3
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fd99 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedAmber);
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <runTraficLight1+0x140>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fc5e 	bl	8000904 <setTime7SEG1>
				handleTime1();
 8001048:	f7ff fc96 	bl	8000978 <handleTime1>
				setTimer(4, 1000);
 800104c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001050:	2004      	movs	r0, #4
 8001052:	f7ff fd8d 	bl	8000b70 <setTimer>
			}
			break;
 8001056:	e023      	b.n	80010a0 <runTraficLight1+0x124>
		case AUTO_LED_AMBER:
			onLedAmber1();
 8001058:	f7ff fe7c 	bl	8000d54 <onLedAmber1>
			if(timer_flag[0] == 1){
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <runTraficLight1+0x138>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01f      	beq.n	80010a4 <runTraficLight1+0x128>
				status = AUTO_LED_RED;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <runTraficLight1+0x130>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
				setTimer(0, durationLedRed*1000);
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <runTraficLight1+0x134>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	4619      	mov	r1, r3
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fd79 	bl	8000b70 <setTimer>
				setTime7SEG1(durationLedRed);
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <runTraficLight1+0x134>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fc3e 	bl	8000904 <setTime7SEG1>
				handleTime1();
 8001088:	f7ff fc76 	bl	8000978 <handleTime1>
				setTimer(4, 1000);
 800108c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001090:	2004      	movs	r0, #4
 8001092:	f7ff fd6d 	bl	8000b70 <setTimer>
			}
			break;
 8001096:	e005      	b.n	80010a4 <runTraficLight1+0x128>
		default:
			break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <runTraficLight1+0x12a>
			break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <runTraficLight1+0x12a>
			break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <runTraficLight1+0x12a>
			break;
 80010a4:	bf00      	nop
	}
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000c0 	.word	0x200000c0
 80010b0:	20000090 	.word	0x20000090
 80010b4:	20000104 	.word	0x20000104
 80010b8:	20000098 	.word	0x20000098
 80010bc:	20000094 	.word	0x20000094

080010c0 <runTraficLight2>:

void runTraficLight2(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	switch (status2){
 80010c4:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <runTraficLight2+0x130>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	f200 8087 	bhi.w	80011dc <runTraficLight2+0x11c>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <runTraficLight2+0x14>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	0800111d 	.word	0x0800111d
 80010dc:	0800119d 	.word	0x0800119d
 80010e0:	0800115d 	.word	0x0800115d
		case INIT:
			offALL2();
 80010e4:	f7ff fec0 	bl	8000e68 <offALL2>
			setTimer(5, durationLedGreen*1000);
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <runTraficLight2+0x134>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	2005      	movs	r0, #5
 80010f8:	f7ff fd3a 	bl	8000b70 <setTimer>
			setTime7SEG2(durationLedGreen);
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <runTraficLight2+0x134>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc5d 	bl	80009c0 <setTime7SEG2>
			handleTime2();
 8001106:	f7ff fc95 	bl	8000a34 <handleTime2>
			setTimer(6, 1000);
 800110a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800110e:	2006      	movs	r0, #6
 8001110:	f7ff fd2e 	bl	8000b70 <setTimer>

			status2 = AUTO_LED_GREEN;
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <runTraficLight2+0x130>)
 8001116:	2203      	movs	r2, #3
 8001118:	601a      	str	r2, [r3, #0]
			break;
 800111a:	e066      	b.n	80011ea <runTraficLight2+0x12a>
		case AUTO_LED_RED:
			onLedRed2();
 800111c:	f7ff fe46 	bl	8000dac <onLedRed2>
			if(timer_flag[5] == 1){
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <runTraficLight2+0x138>)
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <runTraficLight2+0x120>
				status2 = AUTO_LED_GREEN;
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <runTraficLight2+0x130>)
 800112a:	2203      	movs	r2, #3
 800112c:	601a      	str	r2, [r3, #0]
				setTimer(5, durationLedGreen*1000);
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <runTraficLight2+0x134>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4619      	mov	r1, r3
 800113c:	2005      	movs	r0, #5
 800113e:	f7ff fd17 	bl	8000b70 <setTimer>
				setTime7SEG2(durationLedGreen);
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <runTraficLight2+0x134>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fc3a 	bl	80009c0 <setTime7SEG2>
				handleTime2();
 800114c:	f7ff fc72 	bl	8000a34 <handleTime2>
				setTimer(6, 1000);
 8001150:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff fd0b 	bl	8000b70 <setTimer>
			}
			break;
 800115a:	e041      	b.n	80011e0 <runTraficLight2+0x120>
		case AUTO_LED_GREEN:
			onLedGreen2();
 800115c:	f7ff fe56 	bl	8000e0c <onLedGreen2>
			if(timer_flag[5] == 1){
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <runTraficLight2+0x138>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d03d      	beq.n	80011e4 <runTraficLight2+0x124>
				status2 = AUTO_LED_AMBER;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <runTraficLight2+0x130>)
 800116a:	2202      	movs	r2, #2
 800116c:	601a      	str	r2, [r3, #0]
				setTimer(5, durationLedAmber*1000);
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <runTraficLight2+0x13c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	4619      	mov	r1, r3
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff fcf7 	bl	8000b70 <setTimer>
				setTime7SEG2(durationLedAmber);
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <runTraficLight2+0x13c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fc1a 	bl	80009c0 <setTime7SEG2>
				handleTime2();
 800118c:	f7ff fc52 	bl	8000a34 <handleTime2>
				setTimer(6, 1000);
 8001190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001194:	2006      	movs	r0, #6
 8001196:	f7ff fceb 	bl	8000b70 <setTimer>
			}
			break;
 800119a:	e023      	b.n	80011e4 <runTraficLight2+0x124>
		case AUTO_LED_AMBER:
			onLedAmber2();
 800119c:	f7ff fe1e 	bl	8000ddc <onLedAmber2>
			if(timer_flag[5] == 1){
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <runTraficLight2+0x138>)
 80011a2:	795b      	ldrb	r3, [r3, #5]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01f      	beq.n	80011e8 <runTraficLight2+0x128>
				status2 = AUTO_LED_RED;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <runTraficLight2+0x130>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
				setTimer(5, durationLedRed*1000);
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <runTraficLight2+0x140>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	2005      	movs	r0, #5
 80011be:	f7ff fcd7 	bl	8000b70 <setTimer>
				setTime7SEG2(durationLedRed);
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <runTraficLight2+0x140>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fbfa 	bl	80009c0 <setTime7SEG2>
				handleTime2();
 80011cc:	f7ff fc32 	bl	8000a34 <handleTime2>
				setTimer(6, 1000);
 80011d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff fccb 	bl	8000b70 <setTimer>
			}
			break;
 80011da:	e005      	b.n	80011e8 <runTraficLight2+0x128>
		default:
			break;
 80011dc:	bf00      	nop
 80011de:	e004      	b.n	80011ea <runTraficLight2+0x12a>
			break;
 80011e0:	bf00      	nop
 80011e2:	e002      	b.n	80011ea <runTraficLight2+0x12a>
			break;
 80011e4:	bf00      	nop
 80011e6:	e000      	b.n	80011ea <runTraficLight2+0x12a>
			break;
 80011e8:	bf00      	nop
	}
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000c4 	.word	0x200000c4
 80011f4:	20000098 	.word	0x20000098
 80011f8:	20000104 	.word	0x20000104
 80011fc:	20000094 	.word	0x20000094
 8001200:	20000090 	.word	0x20000090

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff fd8a 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800120a:	490c      	ldr	r1, [pc, #48]	; (800123c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001220:	4c09      	ldr	r4, [pc, #36]	; (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f001 fae1 	bl	80027f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff f9eb 	bl	800060c <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001240:	08002890 	.word	0x08002890
  ldr r2, =_sbss
 8001244:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001248:	200001b8 	.word	0x200001b8

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f923 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fcce 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f93b 	bl	8001516 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f903 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000008c 	.word	0x2000008c
 80012d4:	200000a0 	.word	0x200000a0
 80012d8:	2000009c 	.word	0x2000009c

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	200000a0 	.word	0x200000a0
 80012fc:	200001b4 	.word	0x200001b4

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200001b4 	.word	0x200001b4

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4906      	ldr	r1, [pc, #24]	; (80013ac <__NVIC_EnableIRQ+0x34>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff90 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff2d 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff42 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff90 	bl	8001404 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5f 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff35 	bl	8001378 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	; 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e148      	b.n	80017d6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001544:	2201      	movs	r2, #1
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8137 	bne.w	80017d0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4aa3      	ldr	r2, [pc, #652]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800156c:	4aa1      	ldr	r2, [pc, #644]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d875      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001572:	4aa1      	ldr	r2, [pc, #644]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d058      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001578:	4a9f      	ldr	r2, [pc, #636]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d86f      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800157e:	4a9f      	ldr	r2, [pc, #636]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d052      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001584:	4a9d      	ldr	r2, [pc, #628]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d869      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800158a:	4a9d      	ldr	r2, [pc, #628]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04c      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001590:	4a9b      	ldr	r2, [pc, #620]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d863      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001596:	4a9b      	ldr	r2, [pc, #620]	; (8001804 <HAL_GPIO_Init+0x2d4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d046      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800159c:	4a99      	ldr	r2, [pc, #612]	; (8001804 <HAL_GPIO_Init+0x2d4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d85d      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d82a      	bhi.n	80015fc <HAL_GPIO_Init+0xcc>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d859      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_GPIO_Init+0x80>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	08001605 	.word	0x08001605
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001659 	.word	0x08001659
 80015c0:	0800165f 	.word	0x0800165f
 80015c4:	0800165f 	.word	0x0800165f
 80015c8:	0800165f 	.word	0x0800165f
 80015cc:	0800165f 	.word	0x0800165f
 80015d0:	0800165f 	.word	0x0800165f
 80015d4:	0800165f 	.word	0x0800165f
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	0800165f 	.word	0x0800165f
 80015e0:	0800165f 	.word	0x0800165f
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	0800165f 	.word	0x0800165f
 80015ec:	0800165f 	.word	0x0800165f
 80015f0:	0800165f 	.word	0x0800165f
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001621 	.word	0x08001621
 80015fc:	4a82      	ldr	r2, [pc, #520]	; (8001808 <HAL_GPIO_Init+0x2d8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e029      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e024      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01f      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e01a      	b.n	8001660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e013      	b.n	8001660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e009      	b.n	8001660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e003      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x130>
          break;
 800165e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d801      	bhi.n	800166a <HAL_GPIO_Init+0x13a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e001      	b.n	800166e <HAL_GPIO_Init+0x13e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d802      	bhi.n	800167c <HAL_GPIO_Init+0x14c>
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x152>
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3b08      	subs	r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	210f      	movs	r1, #15
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8090 	beq.w	80017d0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a55      	ldr	r2, [pc, #340]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_GPIO_Init+0x2e0>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2e4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1e0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2e8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1dc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2ec>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1d8>
 8001704:	2302      	movs	r3, #2
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 8001708:	2303      	movs	r3, #3
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 8001710:	2300      	movs	r3, #0
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001722:	493b      	ldr	r1, [pc, #236]	; (8001810 <HAL_GPIO_Init+0x2e0>)
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	4933      	ldr	r1, [pc, #204]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001754:	4013      	ands	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	492d      	ldr	r1, [pc, #180]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4929      	ldr	r1, [pc, #164]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4923      	ldr	r1, [pc, #140]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	491f      	ldr	r1, [pc, #124]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4919      	ldr	r1, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4915      	ldr	r1, [pc, #84]	; (8001820 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3301      	adds	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f aeaf 	bne.w	8001544 <HAL_GPIO_Init+0x14>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	372c      	adds	r7, #44	; 0x2c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10310000 	.word	0x10310000
 80017fc:	10220000 	.word	0x10220000
 8001800:	10210000 	.word	0x10210000
 8001804:	10120000 	.word	0x10120000
 8001808:	10110000 	.word	0x10110000
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	40010800 	.word	0x40010800
 8001818:	40010c00 	.word	0x40010c00
 800181c:	40011000 	.word	0x40011000
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001862:	787b      	ldrb	r3, [r7, #1]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001868:	887a      	ldrh	r2, [r7, #2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800186e:	e003      	b.n	8001878 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
	...

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e26c      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
 80018bc:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x12c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e246      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x76>
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7f      	ldr	r2, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7a      	ldr	r2, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a77      	ldr	r2, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xbc>
 8001926:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 8001940:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a67      	ldr	r2, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fcce 	bl	8001300 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fcca 	bl	8001300 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1fa      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe4>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fcba 	bl	8001300 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fcb6 	bl	8001300 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1e6      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x10c>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1ba      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4939      	ldr	r1, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fc6f 	bl	8001300 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff fc6b 	bl	8001300 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e19b      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4927      	ldr	r1, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fc4e 	bl	8001300 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc4a 	bl	8001300 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e17a      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03a      	beq.n	8001b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fc2e 	bl	8001300 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fc2a 	bl	8001300 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e15a      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 fa9a 	bl	8002000 <RCC_Delay>
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fc14 	bl	8001300 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fc10 	bl	8001300 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e140      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42420000 	.word	0x42420000
 8001af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b97      	ldr	r3, [pc, #604]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b94      	ldr	r3, [pc, #592]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a93      	ldr	r2, [pc, #588]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a8a      	ldr	r2, [pc, #552]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fbd1 	bl	8001300 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7ff fbcd 	bl	8001300 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e0fd      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a72      	ldr	r2, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x356>
 8001bc0:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a6c      	ldr	r2, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fb81 	bl	8001300 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fb7d 	bl	8001300 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0ab      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x37e>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fb6b 	bl	8001300 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fb67 	bl	8001300 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e095      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8081 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d061      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d146      	bne.n	8001d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fb3b 	bl	8001300 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fb37 	bl	8001300 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e067      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	492d      	ldr	r1, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a19      	ldr	r1, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb0b 	bl	8001300 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff fb07 	bl	8001300 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e037      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x46a>
 8001d0c:	e02f      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff faf4 	bl	8001300 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff faf0 	bl	8001300 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e020      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x498>
 8001d3a:	e018      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e013      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060

08001d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d0      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4965      	ldr	r1, [pc, #404]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d040      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e073      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06b      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4936      	ldr	r1, [pc, #216]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7ff fa44 	bl	8001300 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff fa40 	bl	8001300 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e053      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d210      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1cc>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f9a2 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08002864 	.word	0x08002864
 8001f50:	2000008c 	.word	0x2000008c
 8001f54:	2000009c 	.word	0x2000009c

08001f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_GetSysClockFreq+0x94>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x30>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x36>
 8001f86:	e027      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	613b      	str	r3, [r7, #16]
      break;
 8001f8c:	e027      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0c5b      	lsrs	r3, r3, #17
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	fb02 f203 	mul.w	r2, r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e004      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	613b      	str	r3, [r7, #16]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fde:	693b      	ldr	r3, [r7, #16]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	08002874 	.word	0x08002874
 8001ff8:	08002884 	.word	0x08002884
 8001ffc:	003d0900 	.word	0x003d0900

08002000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <RCC_Delay+0x34>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <RCC_Delay+0x38>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800201c:	bf00      	nop
  }
  while (Delay --);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	60fa      	str	r2, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <RCC_Delay+0x1c>
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	2000008c 	.word	0x2000008c
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e041      	b.n	80020d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fe04 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f000 fa56 	bl	800252c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e035      	b.n	8002160 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_TIM_Base_Start_IT+0x90>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x4e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d004      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x4e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_Start_IT+0x94>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d010      	beq.n	800215e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e007      	b.n	800215e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40000400 	.word	0x40000400

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d020      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0202 	mvn.w	r2, #2
 80021a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f998 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f98b 	bl	80024e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f99a 	bl	8002506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d020      	beq.n	8002224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0204 	mvn.w	r2, #4
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f972 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f965 	bl	80024e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f974 	bl	8002506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f94c 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f93f 	bl	80024e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f94e 	bl	8002506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d020      	beq.n	80022bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0210 	mvn.w	r2, #16
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2208      	movs	r2, #8
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f926 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f919 	bl	80024e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f928 	bl	8002506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0201 	mvn.w	r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fab0 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa6f 	bl	80027e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8f8 	bl	8002518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0220 	mvn.w	r2, #32
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa42 	bl	80027d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIM_ConfigClockSource+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e0b4      	b.n	80024da <HAL_TIM_ConfigClockSource+0x186>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800238e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a8:	d03e      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0xd4>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ae:	f200 8087 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	f000 8086 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x172>
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d87f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b70      	cmp	r3, #112	; 0x70
 80023c2:	d01a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xa6>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d87b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b60      	cmp	r3, #96	; 0x60
 80023ca:	d050      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x11a>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d877      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b50      	cmp	r3, #80	; 0x50
 80023d2:	d03c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0xfa>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d873      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d058      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x13a>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d86f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b30      	cmp	r3, #48	; 0x30
 80023e2:	d064      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d86b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d060      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d867      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05c      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d05a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	e062      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 f96a 	bl	80026e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800241c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
      break;
 8002426:	e04f      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f000 f953 	bl	80026e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244a:	609a      	str	r2, [r3, #8]
      break;
 800244c:	e03c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f8ca 	bl	80025f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2150      	movs	r1, #80	; 0x50
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f921 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 800246c:	e02c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	f000 f8e8 	bl	8002650 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2160      	movs	r1, #96	; 0x60
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f911 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 800248c:	e01c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f000 f8aa 	bl	80025f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f901 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80024ac:	e00c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f000 f8f8 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80024be:	e003      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e000      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <TIM_Base_SetConfig+0xc0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <TIM_Base_SetConfig+0x28>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d003      	beq.n	8002554 <TIM_Base_SetConfig+0x28>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <TIM_Base_SetConfig+0xc4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d108      	bne.n	8002566 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <TIM_Base_SetConfig+0xc0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <TIM_Base_SetConfig+0x52>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d003      	beq.n	800257e <TIM_Base_SetConfig+0x52>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <TIM_Base_SetConfig+0xc4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d108      	bne.n	8002590 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <TIM_Base_SetConfig+0xc0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d103      	bne.n	80025c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f023 0201 	bic.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]
  }
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400

080025f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0201 	bic.w	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 030a 	bic.w	r3, r3, #10
 8002630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	621a      	str	r2, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0210 	bic.w	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800268c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 0307 	orr.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4313      	orrs	r3, r2
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002734:	2302      	movs	r3, #2
 8002736:	e041      	b.n	80027bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002784:	d004      	beq.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10c      	bne.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400

080027d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <__libc_init_array>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	2600      	movs	r6, #0
 80027f8:	4d0c      	ldr	r5, [pc, #48]	; (800282c <__libc_init_array+0x38>)
 80027fa:	4c0d      	ldr	r4, [pc, #52]	; (8002830 <__libc_init_array+0x3c>)
 80027fc:	1b64      	subs	r4, r4, r5
 80027fe:	10a4      	asrs	r4, r4, #2
 8002800:	42a6      	cmp	r6, r4
 8002802:	d109      	bne.n	8002818 <__libc_init_array+0x24>
 8002804:	f000 f822 	bl	800284c <_init>
 8002808:	2600      	movs	r6, #0
 800280a:	4d0a      	ldr	r5, [pc, #40]	; (8002834 <__libc_init_array+0x40>)
 800280c:	4c0a      	ldr	r4, [pc, #40]	; (8002838 <__libc_init_array+0x44>)
 800280e:	1b64      	subs	r4, r4, r5
 8002810:	10a4      	asrs	r4, r4, #2
 8002812:	42a6      	cmp	r6, r4
 8002814:	d105      	bne.n	8002822 <__libc_init_array+0x2e>
 8002816:	bd70      	pop	{r4, r5, r6, pc}
 8002818:	f855 3b04 	ldr.w	r3, [r5], #4
 800281c:	4798      	blx	r3
 800281e:	3601      	adds	r6, #1
 8002820:	e7ee      	b.n	8002800 <__libc_init_array+0xc>
 8002822:	f855 3b04 	ldr.w	r3, [r5], #4
 8002826:	4798      	blx	r3
 8002828:	3601      	adds	r6, #1
 800282a:	e7f2      	b.n	8002812 <__libc_init_array+0x1e>
 800282c:	08002888 	.word	0x08002888
 8002830:	08002888 	.word	0x08002888
 8002834:	08002888 	.word	0x08002888
 8002838:	0800288c 	.word	0x0800288c

0800283c <memset>:
 800283c:	4603      	mov	r3, r0
 800283e:	4402      	add	r2, r0
 8002840:	4293      	cmp	r3, r2
 8002842:	d100      	bne.n	8002846 <memset+0xa>
 8002844:	4770      	bx	lr
 8002846:	f803 1b01 	strb.w	r1, [r3], #1
 800284a:	e7f9      	b.n	8002840 <memset+0x4>

0800284c <_init>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr

08002858 <_fini>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr
